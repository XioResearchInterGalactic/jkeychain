group 'pt.davidafsilva.apple'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated-sources/"
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
}

task compileEnumGenerator(type: Exec) {
    def libsDir = new File(buildDir, "libs")
    def genSourcesDir = new File(buildDir, "generated-sources")
    if (!libsDir.exists()) libsDir.mkdirs()
    if (!genSourcesDir.exists()) genSourcesDir.mkdirs()

    commandLine 'gcc',
            '-arch',
            'i386',
            '-arch',
            'x86_64',
            '-mmacosx-version-min=10.5',
            '-framework',
            'Security',
            '-std=c99',
            '-pedantic',
            '-Wall',
            '-o',
            "${buildDir}/libs/generate_enums",
            "${projectDir}/src/main/c/generate_enums.c"
}

task generateEnums(type: Exec) {
    def genSources = new File(buildDir, "generated-sources/pt/davidafsilva/apple/")
    if (!genSources.exists()) genSources.mkdirs()
    def authType = genSources.absolutePath + '/OSXKeychainAuthenticationType.java'
    def protocolType = genSources.absolutePath + '/OSXKeychainProtocolType.java'

    commandLine "${buildDir}/libs/generate_enums", authType, protocolType
    dependsOn compileEnumGenerator
}

task generateJniHeaders(type: Exec) {
    def classesDir = sourceSets.main.output.classesDir
    if (!classesDir.exists()) classesDir.mkdirs()

    commandLine 'javah',
            '-d',
            "${projectDir}/src/main/c",
            '-classpath',
            classesDir,
            'pt.davidafsilva.apple.OSXKeychain'
    dependsOn generateEnums, compileJava
}

task compileSoLibrary(type: Exec) {
    def libsDir = new File(buildDir, "libs")
    if (!libsDir.exists()) libsDir.mkdirs()

    commandLine 'gcc',
            '-arch',
            'i386',
            '-arch',
            'x86_64',
            '-mmacosx-version-min=10.5',
            '-dynamiclib',
            '-framework',
            'CoreFoundation',
            '-framework',
            'JavaVM',
            '-framework',
            'Security',
            '-I',
            '/System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers',
            '-std=c99',
            '-pedantic',
            '-Wall',
            '-o',
            "${buildDir}/libs/osxkeychain.so",
            "${projectDir}/src/main/c/pt_davidafsilva_apple_OSXKeychain.c"
    dependsOn generateJniHeaders
}

gradle.projectsEvaluated {
    compileJava.dependsOn(generateEnums)
    compileJava.doLast {
        tasks.compileSoLibrary.execute()
    }
    jar {
        from sourceSets.generated.output, "${buildDir}/libs/osxkeychain.so"
        manifest {
            attributes(
                    "Name": rootProject.name,
                    "Implementation-Title": rootProject.name,
                    "Implementation-Version": version,
                    "Implementation-Vendor": "David Silva"
            )
        }
    }
}

task copySoLib(type: Copy)
copySoLib {
    from "${buildDir}/libs/"
    into test.testClassesDir
    include('osxkeychain.so')
}
testClasses.doLast { copySoLib.execute() }

dependencies {
    // test
    testCompile 'junit:junit:4.12'
}
